#!/bin/bash

MAX_ATTEMPTS="${MAX_ATTEMPTS-3}"
INTERVAL="${INTERVAL-"3s"}"

if [[ "${LOG_LEVEL}" == "trace" ]]
then
  LOG_LEVEL=0
elif [[ "${LOG_LEVEL}" == "debug" ]]
then
  LOG_LEVEL=1
elif [[ "${LOG_LEVEL}" == "information" || "${LOG_LEVEL}" == "info" ]]
then
  LOG_LEVEL=2
elif [[ "${LOG_LEVEL}" == "warning" || "${LOG_LEVEL}" == "warn" ]]
then
  LOG_LEVEL=3
elif [[ "${LOG_LEVEL}" == "error" ]]
then
  LOG_LEVEL=4
elif [[ "${LOG_LEVEL}" == "critical" || "${LOG_LEVEL}" == "crit" ]]
then
  LOG_LEVEL=5
elif [[ "${LOG_LEVEL}" == "none" || "${LOG_LEVEL}" == "silent" ]]
then
  LOG_LEVEL=6
else
  LOG_LEVEL=0
fi

RESET="\e[0m"
BOLD="\e[1m"
DIM="\e[2m"
RED="\e[31m"
GREEN="\e[32m"
YELLOW="\e[33m"
BLUE="\e[34m"
PURPLE="\e[35m"
DARK_GRAY="\e[90m"

log-timestamp () {
  echo -ne "${DIM}$(date +"%Y-%m-%d %H:%M:%S%:z")${RESET} " >&2
}

log-success () {
  log-timestamp
  echo -e "${GREEN}DONE${RESET} ${GREEN}✓${RESET} $1" >&2
}

log-critical () {
  if [[ "${LOG_LEVEL}" -gt 5 ]]
  then
    return
  fi
  log-timestamp
  echo -e "${PURPLE}CRIT${RESET} ${PURPLE}⭍${RESET} $1" >&2
}

log-error () {
  if [[ "${LOG_LEVEL}" -gt 4 ]]
  then
    return
  fi
  log-timestamp
  echo -e "${RED}ERRO${RESET} ${RED}!${RESET} $1" >&2
}

log-warning () {
  if [[ "${LOG_LEVEL}" -gt 3 ]]
  then
    return
  fi
  log-timestamp
  echo -e "${YELLOW}WARN${RESET} ${YELLOW}△${RESET} $1" >&2
}

log-information () {
  if [[ "${LOG_LEVEL}" -gt 2 ]]
  then
    return
  fi
  log-timestamp
  echo -e "${BLUE}INFO${RESET} ${BLUE}○${RESET} $1" >&2
}

log-debug () {
  if [[ "${LOG_LEVEL}" -gt 1 ]]
  then
    return
  fi
  log-timestamp
  echo -e "${DIM}DBUG *${RESET} $1" >&2
}

log-trace () {
  if [[ "${LOG_LEVEL}" -gt 0 ]]
  then
    return
  fi
  log-timestamp
  echo -e "${DIM}TRAC ↩${RESET} $1" >&2
}

# Validate environment variables
ISSUES=()
if [[ -z "${ALLOWED_IP}" && -z "${DISALLOWED_IP}" ]]
then
  ISSUES+=("DISALLOWED_IP")
  ISSUES+=("ALLOWED_IP")
fi
if [[ -z "${MOUNTPOINT}" ]]
then
  ISSUES+=("MOUNTPOINT")
fi
if [[ "${#ISSUES[@]}" -gt 0 ]]
then
  log-error "Missing environment variables: ${ISSUES[*]}"
  log-critical "Unable to continue"
  exit 1
fi

check-mount () {
  if [[ ! -d "${MOUNTPOINT}" ]]
  then
    log-warning "${MOUNTPOINT} is not a directory"
    return 1
  fi
  FILE_COUNT=$(ls -1A "${MOUNTPOINT}" | wc -l)
  if [[ "${FILE_COUNT}" -gt 0 ]]
  then
    log-debug "${MOUNTPOINT} contains ${FILE_COUNT} files or directories"
    return 0
  else
    log-warning "${MOUNTPOINT} appears to be empty"
    log-warning "Ensure the directory has permissions for user: $(id)"
    log-warning "and add at least one file with: touch ${MOUNTPOINT}/.not-empty"
    return 1
  fi
}

check-ip () {
  IP=$(curl --fail --silent --show-error https://ipinfo.io/ip)
  if [[ -n "${DISALLOWED_IP}" ]]
  then
    if [[ "${IP}" == "${DISALLOWED_IP}" ]]
    then
      log-warning "External IP is ${IP} which is disallowed"
      return 1
    fi
  fi
  if [[ -n "${ALLOWED_IP}" ]]
  then
    if [[ "${IP}" != "${ALLOWED_IP}" ]]
    then
      log-warning "External IP is ${IP}. Expected: ${ALLOWED_IP}"
      return 1
    fi
  fi
  log-debug "External IP is ${IP}"
  return 0
}

for ((ATTEMPT=1; ATTEMPT <= MAX_ATTEMPTS; ATTEMPT++))
do
  if check-mount && check-ip
  then
    log-success "All checks passed"
    exit 0
  fi

  if [[ "${ATTEMPT}" -eq "${MAX_ATTEMPTS}" ]]
  then
    break
  fi
  log-information "Retrying in ${INTERVAL}. Attempt ${ATTEMPT} of ${MAX_ATTEMPTS}"
  sleep "${INTERVAL}"
done

log-error "Max number of attempts reached"
exit 1
