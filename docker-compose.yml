services:

  tunnel:
    container_name: tunnel
    hostname: tunnel
    image: ghcr.io/qdm12/gluetun
    # Uncomment the following to make ports public
    #ports:
    #- "0.0.0.0:8112:8112" # Deluge web client
    #- "0.0.0.0:58846:58846" # Deluge daemon
    #- "0.0.0.0:9696:9696"  # Prowlarr
    devices:
    - /dev/net/tun:/dev/net/tun
    environment:
      WIREGUARD_PRIVATE_KEY: CIGiABCDEFGkNDgXCiyidFc61ybHJ1S5ufvUd2NNG3k=
      WIREGUARD_ADDRESSES: 10.2.0.2/32
      WIREGUARD_PUBLIC_KEY: n+45suABCDEFGuZWtCnzGkXNBCgJB3wFZYIlBltpORM=
      VPN_ENDPOINT_IP: 203.0.113.1
      VPN_ENDPOINT_PORT: 51820
      VPN_SERVICE_PROVIDER: custom
      VPN_TYPE: wireguard
      VPN_PORT_FORWARDING: on
      VPN_PORT_FORWARDING_PROVIDER: protonvpn
    cap_add:
    - NET_ADMIN
    restart: unless-stopped

  preflight:
    container_name: preflight
    build: preflight
    volumes:
    - /media:/media
    environment:
      MOUNTPOINT: /media
      EXPECTED_IP: 203.0.113.1
      LOG_LEVEL: debug
    depends_on:
      tunnel:
        condition: service_healthy
    network_mode: "service:tunnel"

  monitor:
    container_name: monitor
    build: monitor
    environment:
      LOG_LEVEL: warn
      INTERVAL: 5m
      RETRY: 2s
    env_file:
    - monitor/.env
    network_mode: "service:tunnel"
    restart: unless-stopped
    healthcheck:
      test: ls /healthy

  deluge:
    container_name: deluge
    image: lscr.io/linuxserver/deluge
    volumes:
    - /data/deluge:/config
    - /media:/media
    environment:
      PUID: 1000
      PGID: 1000
      TZ: Etc/UTC
    network_mode: "service:tunnel"
    depends_on:
      preflight:
        condition: service_completed_successfully
    healthcheck:
      test: curl --fail http://localhost:8112 || exit 1
    restart: unless-stopped

  prowlarr:
    container_name: prowlarr
    image: lscr.io/linuxserver/prowlarr:develop
    volumes:
    - /data/prowlarr:/config
    environment:
      PUID: 1000
      PGID: 1000
      TZ: Etc/UTC
    network_mode: "service:tunnel"
    depends_on:
      preflight:
        condition: service_completed_successfully
    healthcheck:
      test: curl --fail http://localhost:9696 || exit 1
    restart: unless-stopped

  caddy:
    container_name: caddy
    build: caddy
    ports:
    - "80:80"
    - "443:443"
    - "443:443/udp"
    volumes:
    - /data/caddy/data:/data/caddy
    - /data/caddy/config:/config/caddy
    env_file:
    - caddy/.env
    healthcheck:
      test: curl --fail http://localhost/healthcheck || exit 1
    restart: unless-stopped
